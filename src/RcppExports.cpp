// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compTestData
List compTestData(std::list<std::list<std::vector<int> > > pifams, std::list<std::list<std::vector<int> > > ORFs, std::list<std::vector<int> > lengths, std::vector<int> lengthSums, int minContigLength, int meanContigLength, int number, std::vector<double> comp, std::vector<double> con, std::vector<std::vector<int> > names, int seed, std::string distr);
RcppExport SEXP _CompletenessTestData_compTestData(SEXP pifamsSEXP, SEXP ORFsSEXP, SEXP lengthsSEXP, SEXP lengthSumsSEXP, SEXP minContigLengthSEXP, SEXP meanContigLengthSEXP, SEXP numberSEXP, SEXP compSEXP, SEXP conSEXP, SEXP namesSEXP, SEXP seedSEXP, SEXP distrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::list<std::list<std::vector<int> > > >::type pifams(pifamsSEXP);
    Rcpp::traits::input_parameter< std::list<std::list<std::vector<int> > > >::type ORFs(ORFsSEXP);
    Rcpp::traits::input_parameter< std::list<std::vector<int> > >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lengthSums(lengthSumsSEXP);
    Rcpp::traits::input_parameter< int >::type minContigLength(minContigLengthSEXP);
    Rcpp::traits::input_parameter< int >::type meanContigLength(meanContigLengthSEXP);
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type comp(compSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type con(conSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< std::string >::type distr(distrSEXP);
    rcpp_result_gen = Rcpp::wrap(compTestData(pifams, ORFs, lengths, lengthSums, minContigLength, meanContigLength, number, comp, con, names, seed, distr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompletenessTestData_compTestData", (DL_FUNC) &_CompletenessTestData_compTestData, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompletenessTestData(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
